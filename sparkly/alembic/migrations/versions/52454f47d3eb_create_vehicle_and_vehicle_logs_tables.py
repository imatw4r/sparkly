"""Create Vehicle and Vehicle Logs tables.

Revision ID: 52454f47d3eb
Revises: 
Create Date: 2023-01-17 18:46:01.715268

"""
from alembic import op
import sqlalchemy as sa
import sparkly.app.utils.sqlalchemy

from sqlalchemy.dialects import postgresql
from sparkly.app.domain import value_objects

# revision identifiers, used by Alembic.
revision = "52454f47d3eb"
down_revision = None
branch_labels = None
depends_on = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table(
        "log",
        sa.Column("id", postgresql.UUID(as_uuid=True), nullable=False),
        sa.Column(
            "timestamp",
            sparkly.app.utils.sqlalchemy.PydanticType(pydantic_class=value_objects.Timestamp),
            nullable=True,
        ),
        sa.Column(
            "speed",
            sparkly.app.utils.sqlalchemy.PydanticType(pydantic_class=value_objects.VehicleSpeed),
            nullable=True,
        ),
        sa.Column(
            "odometer", sparkly.app.utils.sqlalchemy.PydanticType(pydantic_class=value_objects.Odometer), nullable=True
        ),
        sa.Column(
            "state_of_charge",
            sparkly.app.utils.sqlalchemy.PydanticType(pydantic_class=value_objects.StateOfCharge),
            nullable=True,
        ),
        sa.Column(
            "elevation",
            sparkly.app.utils.sqlalchemy.PydanticType(pydantic_class=value_objects.Elevation),
            nullable=True,
        ),
        sa.Column(
            "shift_state",
            sparkly.app.utils.sqlalchemy.PydanticType(pydantic_class=value_objects.ShiftState),
            nullable=True,
        ),
        sa.PrimaryKeyConstraint("id"),
    )
    op.create_table(
        "vehicle", sa.Column("id", postgresql.UUID(as_uuid=True), nullable=False), sa.PrimaryKeyConstraint("id")
    )
    op.create_table(
        "vehicle_to_log",
        sa.Column("vehicle_id", postgresql.UUID(as_uuid=True), nullable=False),
        sa.Column("log_id", postgresql.UUID(as_uuid=True), nullable=False),
        sa.ForeignKeyConstraint(["log_id"], ["log.id"], name="vehicle_to_log__log_id_fk"),
        sa.ForeignKeyConstraint(["vehicle_id"], ["vehicle.id"], name="vehicle_to_log__vehicle_id_fk"),
        sa.PrimaryKeyConstraint("vehicle_id", "log_id"),
    )
    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_table("vehicle_to_log")
    op.drop_table("vehicle")
    op.drop_table("log")
    # ### end Alembic commands ###
